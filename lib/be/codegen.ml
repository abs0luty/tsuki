(*
 * Translate the AST to a Javascript program. 
 * All type safety is lost by this point, but we have checked prior 
 *)

open Batteries
open Fe.Ast

let gen_comment = "// This file was autogenerated by Tsuki.\n\n"

let gen_literal = function
  | LitInt d -> string_of_int d
  | LitFloat f -> string_of_float f
  | LitStr s -> "\"" ^ s ^ "\""

let rec gen_expr = function
  | Lit lit -> gen_literal lit
  | Ident name -> name
  | FuncCall (name, params) ->
      Printf.sprintf "%s(%s);" name
        (String.concat "," (List.map gen_expr params))
  | BinOp (l, op, r) -> (
      match op with
      | Op_Plus -> gen_expr l ^ "+" ^ gen_expr r
      | Op_Minus -> gen_expr l ^ "-" ^ gen_expr r
      | Op_Star -> "(" ^ gen_expr l ^ "*" ^ gen_expr r ^ ")"
      | Op_Slash -> "(" ^ gen_expr l ^ "/" ^ gen_expr r ^ ")"
      | Op_Eq -> gen_expr l ^ "===" ^ gen_expr r
      | Op_NotEq -> gen_expr l ^ "===" ^ gen_expr r
      | Op_Lt -> gen_expr l ^ "<" ^ gen_expr r
      | Op_Gt -> gen_expr l ^ ">" ^ gen_expr r
      | Op_LtEq -> gen_expr l ^ "<=" ^ gen_expr r
      | Op_GtEq -> gen_expr l ^ ">=" ^ gen_expr r
      | _ -> "")
  | List xs -> "[" ^ String.concat "," (List.map gen_expr xs) ^ "]"
  | _ -> ""

and gen_stmt = function
  | VarDecl (_, name, exp) ->
      Printf.sprintf "\nlet %s = %s;" name (gen_expr exp)
  | ShortVarDecl (name, exp) ->
      Printf.sprintf "\nlet %s = %s;" name (gen_expr exp)
  | VarAssign (name, exp) -> Printf.sprintf "\%s = %s;" name (gen_expr exp)
  | If (cond, then_b, else_b) ->
      Printf.sprintf "\nif (%s)" (gen_expr cond)
      ^ gen_block then_b ^ "\nelse " ^ gen_block else_b ^ "\n"
  | For (name, exp, block) ->
      Printf.sprintf "\nfor (var %s of %s)" name (gen_expr exp)
      ^ gen_block block
  | While (cond, block) ->
      Printf.sprintf "\while (%s)" (gen_expr cond) ^ gen_block block
  | FuncCall call -> gen_expr call

and gen_block = function
  | Block stmts -> "{" ^ String.concat "\n" (List.map gen_stmt stmts) ^ "\n}"

let gen_func_params (params : (string * ty) list) =
  String.concat "," (List.map (fun (name, _) -> name) params)

let gen_top_level = function
  | FuncDefn (name, [], block) ->
      Printf.sprintf "function %s()" name ^ gen_block block
  | FuncDefn (name, params, block) ->
      Printf.sprintf "function %s(%s)" name (gen_func_params params)
      ^ gen_block block
  | Stmt stmts -> gen_stmt stmts

let gen_program tls = String.concat "\n" (List.map gen_top_level tls)
let walk_ast (Program ast) = gen_comment ^ gen_program ast